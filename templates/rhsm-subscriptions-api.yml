apiVersion: v1
kind: Template
labels:
  app: rhsm-subscriptions
  template: rhsm-subscriptions-api
metadata:
  annotations:
    description: Request-serving components for Subscription Watch.
  name: rhsm-subscriptions-api

parameters:
  - name: LOGGING_LEVEL_ROOT
    value: WARN
  - name: LOGGING_LEVEL
    value: INFO
  - name: RBAC_HOST
    required: true
  - name: RBAC_PORT
    value: '8080'
  - name: KAFKA_BOOTSTRAP_HOST
    required: true
  - name: REPLICAS
    value: '1'
  - name: IMAGE
    value: quay.io/cloudservices/rhsm-subscriptions
  - name: IMAGE_TAG
    value: latest
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: MEMORY_REQUEST
    value: 256Mi
  - name: MEMORY_LIMIT
    value: 500Mi
  - name: CPU_REQUEST
    value: 200m
  - name: CPU_LIMIT
    value: 300m
  - name: SPLUNK_FORWARDER_IMAGE
    value: quay.io/cloudservices/rhsm-splunk-forwarder:8f72cfb
  - name: SPLUNK_FORWARDER_MEMORY_REQUEST
    value: 128Mi
  - name: SPLUNK_FORWARDER_MEMORY_LIMIT
    value: 256Mi
  - name: SPLUNK_FORWARDER_CPU_REQUEST
    value: 50m
  - name: SPLUNK_FORWARDER_CPU_LIMIT
    value: 100m

objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: rhsm-subscriptions-config
    data:
      ssl.properties: |-
        # force client cert auth for ingress endpoints
        server.port=8443
        server.ssl.client-auth=NEED
        server.ssl.enabled=true

        server.ssl.key-store=${KEYSTORE}
        server.ssl.key-store-password=${KEYSTORE_PASSWORD}

        server.ssl.trust-store=${TRUSTSTORE}
        server.ssl.trust-store-password=${TRUSTSTORE_PASSWORD}

        # put /actuator calls on 8080
        management.server.port=8080
        management.server.ssl.enabled=false

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: rhsm-subscriptions-api
    spec:
      replicas: ${{REPLICAS}}
      selector:
        deploymentconfig: rhsm-subscriptions-api
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            deploymentconfig: rhsm-subscriptions-api
            prometheus: rhsm
          annotations:
            prometheus.io/path: /actuator/prometheus
            prometheus.io/port: '8080'
            prometheus.io/scrape: 'true'
        spec:
          initContainers:
            - image: ${IMAGE}:${IMAGE_TAG}
              name: liquibase
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: liquibase-only
                - name: JAVA_MAX_MEM_RATIO
                  value: '85'
                - name: GC_MAX_METASPACE_SIZE
                  value: '256'
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.host
                - name: DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.port
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.password
                - name: DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.name
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
          containers:
            - image: ${IMAGE}:${IMAGE_TAG}
              name: rhsm-subscriptions-api
              env:
                - name: LOG_FILE
                  value: /logs/server.log
                - name: SPRING_PROFILES_ACTIVE
                  value: api
                - name: JAVA_MAX_MEM_RATIO
                  value: '85'
                - name: GC_MAX_METASPACE_SIZE
                  value: '256'
                - name: LOGGING_LEVEL_ROOT
                  value: ${LOGGING_LEVEL_ROOT}
                - name: LOGGING_LEVEL_ORG_CANDLEPIN
                  value: ${LOGGING_LEVEL}
                - name: KAFKA_BOOTSTRAP_HOST
                  value: ${KAFKA_BOOTSTRAP_HOST}
                - name: RBAC_HOST
                  value: ${RBAC_HOST}
                - name: RBAC_PORT
                  value: ${RBAC_PORT}
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.host
                - name: DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.port
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.password
                - name: DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.name
                - name: INVENTORY_DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.host
                - name: INVENTORY_DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.name
                - name: INVENTORY_DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.user
                - name: INVENTORY_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.password
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 90
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 3
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 90
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 3
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8778
                  name: jolokia
                  protocol: TCP
              volumeMounts:
                - name: config
                  mountPath: /config
                - name: logs
                  mountPath: /logs
              workingDir: /
            - name: splunk
              env:
                - name: SPLUNKMETA_namespace
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              image: ${SPLUNK_FORWARDER_IMAGE}
              resources:
                requests:
                  cpu: ${SPLUNK_FORWARDER_CPU_REQUEST}
                  memory: ${SPLUNK_FORWARDER_MEMORY_REQUEST}
                limits:
                  cpu: ${SPLUNK_FORWARDER_CPU_LIMIT}
                  memory: ${SPLUNK_FORWARDER_MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/log/app
                  name: logs
                  readOnly: true
                - mountPath: /tls/splunk.pem
                  name: splunk
                  subPath: splunk.pem
          volumes:
            - name: config
              configMap:
                name: rhsm-subscriptions-config
            - name: splunk
              secret:
                secretName: splunk
            - name: logs
              emptyDir:
          restartPolicy: Always
          terminationGracePeriodSeconds: 75
          imagePullSecrets:
          - name: ${IMAGE_PULL_SECRET}
          - name: quay-cloudservices-pull
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: rhsm-subscriptions
      labels:
        prometheus: rhsm
    spec:
      ports:
        - port: 8080
          name: "8080"
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: rhsm-subscriptions-api
