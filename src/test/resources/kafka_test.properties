# A configuration file to be used when testing kafka integration.
rhsm-subscriptions.datasource.platform=hsqldb
rhsm-subscriptions.datasource.url=jdbc:hsqldb:mem:testdb
rhsm-subscriptions.datasource.username=
rhsm-subscriptions.datasource.password=
rhsm-subscriptions.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver

rhsm-subscriptions.inventory-service.datasource.platform=hsqldb
rhsm-subscriptions.inventory-service.datasource.url=jdbc:hsqldb:mem:inventory-testdb
rhsm-subscriptions.inventory-service.datasource.username=
rhsm-subscriptions.inventory-service.datasource.password=
rhsm-subscriptions.inventory-service.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver

rhsm-subscriptions.quartz.datasource.platform=hsqldb
rhsm-subscriptions.quartz.datasource.url=jdbc:hsqldb:mem:quartz
rhsm-subscriptions.quartz.datasource.username=
rhsm-subscriptions.quartz.datasource.password=
rhsm-subscriptions.quartz.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver
rhsm-subscriptions.quartz.datasource.initialize-schema=always

# Configure the kafka task queue and the embedded kafka broker
rhsm-subscriptions.tasks.queue=kafka
rhsm-subscriptions.tasks.task-group=rhsm-subscriptions-tasks
spring.kafka.bootstrap-servers=${spring.embedded.kafka.brokers}
# In tests, messages may be sent before the listener has been assigned the topic
# so we ensure that when the listener comes online it starts from first message.
spring.kafka.consumer.auto-offset-reset=earliest
