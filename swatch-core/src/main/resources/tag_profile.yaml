# Tags describe the categories that a particular offering should be placed in.  For example, a
# customer who has a system with engineering product ID 68 (RHEL Desktop) should have that system
# categorized as "RHEL" and as "RHEL Desktop".  Multiple attributes can affect which tag is applied.

# The tagMappings section defines how tags relate to system attributes.  Each tagMapping has a
# value, a value type, and the tags it is associate with.  For example, a system with architecture
# "arm64" would get the "RHEL for ARM" tag.  The value is "arm64", the value type is "architecture",
# and the tag is "RHEL for ARM".
tagMappings:
  # OpenShift engineering product IDs
  - value: 290 # Red Hat OpenShift Container Platform
    valueType: engId
    tags:
      - OpenShift Container Platform

  # OpenShift syspurpose roles
  - value: ocp
    valueType: role
    tags:
      - OpenShift-metrics
  - value: osd
    valueType: role
    tags:
      - OpenShift-dedicated-metrics

  # OpenShift Offering Product Names
  - value: OpenShift Dedicated
    valueType: productName
    tags:
      - OpenShift-dedicated-metrics
  - value: OpenShift Container Platform
    valueType: productName
    tags:
      - OpenShift-metrics

  - value: OpenShift Streams for Apache Kafka
    valueType: productName
    tags:
      - rhosak

# Individual tags can be measured in different ways.  The tagMetrics section defines these
# measurements.  A tag will, at minimum, have a "uom" attribute (unit of measure) that defines the
# units being tracked (e.g. cores).  Tags that rely on pulling information from Prometheus will have
# additional information that defines the Prometheus metric being used, the metric ID, etc.
tagMetrics:
  # OCP metrics
  - tag: OpenShift-metrics
    metricId: redhat.com:openshift_container_platform:cpu_hour
    uom: CORES
    queryKey: 5mSamples
    queryParams:
      product: ocp
      prometheusMetric: cluster:usage:workload:capacity_physical_cpu_cores:max:5m
      prometheusMetadataMetric: subscription_labels

  # OSD metrics
  - tag: OpenShift-dedicated-metrics
    metricId: redhat.com:openshift_dedicated:4cpu_hour
    uom: CORES
    queryKey: 5mSamples
    queryParams:
      product: osd
      prometheusMetric: cluster:usage:workload:capacity_physical_cpu_cores:max:5m
      prometheusMetadataMetric: subscription_labels
  - tag: OpenShift-dedicated-metrics
    metricId: redhat.com:openshift_dedicated:cluster_hour
    uom: INSTANCE_HOURS
    queryKey: 5mSamples
    queryParams:
      product: osd
      prometheusMetric: group(cluster:usage:workload:capacity_physical_cpu_cores:max:5m) by (_id)
      prometheusMetadataMetric: subscription_labels

  # RHOSAK
  - tag: rhosak
    metricId: redhat.com:rhosak:transfer_gb
    uom: TRANSFER_GIGABYTES
    queryParams:
      product: rhosak
      # Metric being reported is GiB, even though swatch refers to it as gigabyte.
      # Swatch uses "gigabyte" as the general terminology and does no conversions
      prometheusMetric: kafka_id:haproxy_server_bytes_in_out_total:rate1h_gibibytes
      prometheusMetadataMetric: subscription_labels

# The tagMetaData section defines additional information around how a tag is tallied.  Most notably,
# tags need to have their finest granularity defined so that we can create accurate snapshots.  A
# tag that only supports DAILY granularity shouldn't be tallied hourly, for example.  Other metadata
# can also be applied here in a key-value fashion.
tagMetaData:
  - tags:
      - OpenShift Container Platform
    finestGranularity: DAILY
  - tags:
      - OpenShift-metrics
      - OpenShift-dedicated-metrics
    serviceType: OpenShift Cluster
    finestGranularity: HOURLY
    defaultSla: PREMIUM
    defaultUsage: PRODUCTION
  - tags:
      - rhosak
    serviceType: Kafka Cluster
    finestGranularity: HOURLY
    defaultSla: PREMIUM
    defaultUsage: PRODUCTION
