plugins {
    id 'java'
    id 'jsonschema2pojo'
    id "org.openapi.generator"
}

ext {
    api_spec_path = "${projectDir}/rhsm-subscriptions-api-spec.yaml"
    config_file = "${projectDir}/rhsm-subscriptions-api-config.json"
}

dependencies {
    implementation project(":api") // for util methods in ResourceUtils
    implementation project(":rbac-client") // for security integration w/ rbac
    implementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    implementation "org.hibernate.validator:hibernate-validator"
    implementation "javax.validation:validation-api"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-actuator-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.google.guava:guava" // for ip address class
    implementation "com.fasterxml.jackson.core:jackson-annotations" // for json generated models
    implementation "com.fasterxml.jackson.core:jackson-databind" // for use of objectmapper in EventRecord
    implementation "org.springframework.kafka:spring-kafka"
    implementation "io.micrometer:micrometer-core"
    implementation "io.hawt:hawtio-springboot"
    implementation("io.confluent:kafka-avro-serializer") {
        exclude group: "org.apache.kafka"
        // A transitive dependency, org.apache.zookeeper:zookeeper, includes log4j as well as slf4j.  We use
        // logback and SLF4J issues a warning if more than one logging implementation is on the classpath.
        // Frowny face to Zookeeper for adding a logging implementation to a library jar.
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    implementation project(":kafka-schema")

    // formly :api project
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "javax.validation:validation-api"
    compile "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec"
    compile "io.swagger:swagger-annotations"
    compile "com.google.code.findbugs:jsr305:3.0.2"
    compile "org.openapitools:jackson-databind-nullable:0.2.1"
}

jsonSchema2Pojo {
    source = files("${projectDir}/schemas")
    targetPackage = "org.candlepin.subscriptions.json"
    includeAdditionalProperties = false
    includeJsr303Annotations = true
    initializeCollections = false
    dateTimeType = 'java.time.OffsetDateTime'
    sourceType = 'yamlschema'
    generateBuilders = true
    includeGetters = true
    includeSetters = true
}

description = 'SWATCH Core Library'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

openApiGenerate {
    generatorName = "jaxrs-spec"
    inputSpec = api_spec_path
    configFile = config_file
    outputDir = "$buildDir/generated"
    configOptions = [
            interfaceOnly: "true",
            generatePom: "false",
            dateLibrary: "java8",
    ]
}

openApiValidate {
    inputSpec = api_spec_path
}

task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "html"
    inputSpec = api_spec_path
    outputDir = "$buildDir/docs"
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = false
    generateApiTests = false
    withXml = false
}

task generateOpenApiJson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "openapi"
    inputSpec = api_spec_path
    outputDir = "$buildDir/generated/openapijson"
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = false
    generateApiTests = false
    withXml = false
}

processResources {
    from "$buildDir/generated/openapijson/openapi.json"
    from api_spec_path
    rename { String fileName ->
        api_spec_path.endsWith(fileName) ? 'openapi.yaml' : fileName  // rename yaml to openapi.yaml
    }
}

sourceSets.main.java.srcDirs += ["${buildDir}/generated/src/gen/java"]
compileJava.dependsOn tasks.openApiGenerate
processResources.dependsOn tasks.generateOpenApiJson